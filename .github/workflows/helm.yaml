name: Helm

on:
  push:
    branches:
      - main
    paths:
      - "charts/**"
      - ".github/workflows/helm.yaml"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  check_charts:
    name: Check charts
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Checkout PR
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: pr

      - name: Checkout main
        uses: actions/checkout@v5
        with:
          ref: main
          path: main

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Diff charts
        id: diff
        run: |
          set -eou pipefail

          cd pr

          git fetch origin main
          mapfile -t changed_charts < <(git diff --name-only origin/main | grep -oE '^charts/([^/]+)' | sed 's/charts\///' | sort -u)

          cd ..

          changed=0
          touch changes.md

          template () {
            source="$1"
            chart="$2"

            # If the chart never existed or was deleted, create an empty file.
            if [[ ! -d "$source/charts/$chart" ]]; then
              touch "$source.yaml"
              return
            fi

            # Build dependencies.
            [[ ! -f "$source/charts/$chart/Chart.lock" ]] && helm dependency build "$source/charts/$chart"

            helm template release "$source/charts/$chart" >"$source.yaml"
          }

          for chart in "${changed_charts[@]}"; do
            template main "$chart"
            template pr "$chart"

            if ! changes="$(diff -u main.yaml pr.yaml)"; then
              {
                echo "<details>"
                echo "<summary><code>helm template release charts/$chart</code></summary>"
                echo ""
                echo '```diff'
                echo "$changes"
                echo '```'
                echo ""
                echo "</details>"
                echo ""
              } >>changes.md
              {
                echo "$changes"
              } >>"$chart.diff"
              changed+=1
            fi
          done

          echo "changed=$changed" >>"$GITHUB_OUTPUT"

          # Check if the character count exceeds the limit.
          if [[ $(wc -c <changes.md) -gt 65400 ]]; then
            echo "long=1" >>"$GITHUB_OUTPUT"
          else
            echo "long=0" >>"$GITHUB_OUTPUT"
          fi

      - name: Upload diffs
        uses: actions/upload-artifact@v4
        id: diff-upload
        if: steps.diff.outputs.changed != '0' && steps.diff.outputs.long == '1'
        with:
          name: chart-diffs
          path: "*.diff"

      - name: Create diff comment
        id: diff-comment
        run: |
          set -eou pipefail

          # Check if the character count exceeds the limit.
          if [[ $(wc -c <changes.md) -gt 65400 ]]; then
            {
              echo 'changes<<EOF'
              echo "Changes are too long to be displayed inline. [Download the diffs here](${{ steps.diff-upload.outputs.artifact-url }})."
              echo EOF
            } >>"$GITHUB_OUTPUT"
          else
            {
              echo 'changes<<EOF'
              cat changes.md
              echo EOF
            } >>"$GITHUB_OUTPUT"
          fi

      - name: Find diff comment
        uses: peter-evans/find-comment@v3
        id: find-diff
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Chart changes"

      - name: Publish chart changes
        uses: peter-evans/create-or-update-comment@v4
        if: steps.diff.outputs.changed != '0'
        with:
          comment-id: ${{ steps.find-diff.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## üí• Chart changes

            The following charts have been modified.

            ${{ steps.diff-comment.outputs.changes }}
          edit-mode: replace

      - name: Delete diff comment
        if: steps.diff.outputs.changed == '0' && steps.find-diff.outputs.comment-id != ''
        run: gh api /repos/${{ github.repository }}/issues/comments/${{ steps.find-diff.outputs.comment-id }} -X DELETE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for pending version updates
        id: version
        run: |
          set -eou pipefail

          cd pr

          git fetch origin main
          mapfile -t changed_charts < <(git diff --name-only origin/main | grep -oE '^charts/([^/]+)' | sed 's/charts\///' | sort -u)

          cd ..

          pending=0
          touch pending.md

          echo '| Chart | Valid | `main` | `HEAD` |' >>pending.md
          echo '| --- | --- | --- | --- |' >>pending.md

          for chart in "${changed_charts[@]}"; do
            # This is a deleted chart. Any version is valid.
            if [[ ! -d "pr/charts/$chart" ]]; then
              echo "| $chart | ‚úÖ | N/A | N/A |" >>pending.md
              continue
            fi

            pr_version=$(grep -oP '^version: \K[^\n]+' pr/charts/$chart/Chart.yaml | tr -d '\n')

            # This is a new chart. Any version is valid.
            if [[ ! -d "main/charts/$chart" ]]; then
              echo "| $chart | ‚úÖ | N/A | $pr_version |" >>pending.md
              continue
            fi

            main_version=$(grep -oP '^version: \K[^\n]+' main/charts/$chart/Chart.yaml | tr -d '\n')

            # The version in the `Chart.yaml` file has been updated.
            if [[ "$main_version" != "$pr_version" ]]; then
              echo "| $chart | ‚úÖ | $main_version | $pr_version |" >>pending.md
              continue
            fi

            # The version in the `Chart.yaml` file has not been updated.
            echo "| $chart | ‚ùå | $main_version | $pr_version |" >>pending.md
            pending+=1
          done

          echo "pending=$pending" >>"$GITHUB_OUTPUT"

          {
            echo 'log<<EOF'
            cat pending.md
            echo EOF
          } >>"$GITHUB_OUTPUT"

      - name: Find pending version updates comment
        uses: peter-evans/find-comment@v3
        id: find-version
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Pending version updates"

      - name: Publish pending version updates
        uses: peter-evans/create-or-update-comment@v4
        if: steps.version.outputs.pending != '0'
        with:
          comment-id: ${{ steps.find-version.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## üì¶ Pending version updates

            When a chart is changed, the version in the `Chart.yaml` file must be updated.

            ${{ steps.version.outputs.log }}
          edit-mode: replace

      - name: Delete pending version updates comment
        if: steps.version.outputs.pending == '0' && steps.find-version.outputs.comment-id != ''
        run: gh api /repos/${{ github.repository }}/issues/comments/${{ steps.find-version.outputs.comment-id }} -X DELETE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint charts
        id: lint
        run: |
          set -eou pipefail

          cd pr

          mapfile -t charts < <(find charts -mindepth 1 -maxdepth 1 -type d)

          cd ..

          for chart in "${charts[@]}"; do
            [[ ! -f "pr/$chart/Chart.lock" ]] && helm dependency build pr/$chart
          done

          if output=$(helm lint pr/charts/* --strict); then
            echo 'result=0' >>"$GITHUB_OUTPUT"
          else
            echo 'result=1' >>"$GITHUB_OUTPUT"
          fi

          {
            echo 'log<<EOF'
            echo "$output"
            echo EOF
          } >>"$GITHUB_OUTPUT"

      - name: Find lint comment
        uses: peter-evans/find-comment@v3
        id: find-lint
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Helm linting"

      - name: Publish lint results
        uses: peter-evans/create-or-update-comment@v4
        if: steps.lint.outputs.result != '0'
        with:
          comment-id: ${{ steps.find-lint.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ‚ò∏Ô∏è Helm linting

            <details>
            <summary><code>helm lint charts/* --strict</code></summary>

            ```txt
            ${{ steps.lint.outputs.log }}
            ```

            </details>
          edit-mode: replace

      - name: Delete lint comment
        if: steps.lint.outputs.result == '0' && steps.find-lint.outputs.comment-id != ''
        run: gh api /repos/${{ github.repository }}/issues/comments/${{ steps.find-lint.outputs.comment-id }} -X DELETE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail on pending version updates
        if: steps.version.outputs.pending != '0'
        run: exit 1

      - name: Fail on lint errors
        if: steps.lint.outputs.result != '0'
        run: exit 1

  publish_charts:
    name: Publish charts
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Setup ORAS
        uses: oras-project/setup-oras@v1

      - name: Publish charts
        run: |
          set -eou pipefail

          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | oras login ghcr.io --username ${{ github.actor }} --password-stdin

          mapfile -t changed_charts < <(git diff --name-only HEAD~1 | grep -oP 'charts/\K[^/]+' | sort -u)

          for chart in "${changed_charts[@]}"; do
            # If the chart was deleted, skip it.
            if [[ ! -d "charts/$chart" ]]; then
              echo "Skipping deleted chart: $chart"
              continue
            fi

            [[ ! -f "charts/$chart/Chart.lock" ]] && helm dependency build "charts/$chart"
            helm package "charts/$chart"
            helm push $chart-*.tgz oci://ghcr.io/nicklasfrahm/charts
            if [[ -f "charts/$chart/artifacthub-repo.yml" ]]; then
              oras push \
                "ghcr.io/nicklasfrahm/charts/$chart:artifacthub.io" \
                --config /dev/null:application/vnd.cncf.artifacthub.config.v1+yaml \
                "charts/$chart/artifacthub-repo.yml:application/vnd.cncf.artifacthub.repository-metadata.layer.v1.yaml"
            fi
          done
