global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	tcp
	option	tcplog
	option	dontlognull
        timeout connect 5000
        timeout client  10m
        timeout server  10m
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend stats
	bind *:8404
	mode http
	# Optional: restrict by IP
	# acl allowed_network src 192.168.1.0/24
	# http-request deny if !allowed_network

	# Redirect to stats page
	stats uri /haproxy?stats
	stats refresh 15s

frontend http
	bind *:80
	mode http
	option httplog
	
	use_backend http_cph02 if { req.hdr(host) -m str -i auth.nicklasfrahm.dev }
	use_backend http_cph02 if { req.hdr(host) -m str -i kommodity.io }
	use_backend http_cph02 if { req.hdr(host) -m reg -i ^.*cph02\.nicklasfrahm\.dev$ }

frontend https
	bind *:443
	mode tcp
	option tcplog

	tcp-request inspect-delay 5s
	tcp-request content accept if { req_ssl_hello_type 1 }

	use_backend https_cph02 if { req_ssl_sni -m str -i auth.nicklasfrahm.dev }
	use_backend https_cph02 if { req_ssl_sni -m str -i kommodity.io }
	use_backend https_cph02 if { req_ssl_sni -m reg -i ^.*cph02\.nicklasfrahm\.dev$ }

frontend kubeapi
	bind *:6443
	mode tcp
	option tcplog
	
	tcp-request inspect-delay 5s
	tcp-request content accept if { req_ssl_hello_type 1 }

	use_backend kubeapi_cph02 if { req_ssl_sni -m reg -i ^.*cph02\.nicklasfrahm\.dev$ }

backend http_cph02
	mode http
	balance leastconn

	server shared-http 172.29.0.1:80 check send-proxy-v2
	
backend https_cph02
	mode tcp
	balance leastconn

	server shared-http 172.29.0.1:443 check send-proxy-v2

backend kubeapi_cph02
	mode tcp
	option tcpka
	balance leastconn
    
	server alpaca 10.0.20.1:6443 check inter 2s rise 3 fall 1
	server bison 10.0.20.2:6443 check inter 2s rise 3 fall 1
	server camel 10.0.20.3:6443 check inter 2s rise 3 fall 1
